#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var args = require('optimist').argv;
var cwd = process.cwd();
var spawn = require('child_process').spawn;

var phantom = path.resolve(cwd, args.phantom || 'node_modules/phantomjs/lib/phantom/bin/phantomjs');
var script = path.resolve(cwd, args.script || 'tools/screenshot.js');
var pathScreenshots = path.resolve(cwd, args.screenshots || 'screenshots');

process.stdin.on('data', function(buf) {
    var data = buf.toString();
    var pages = data.replace(/\n/g, ' ').split(' ');

    if (args.local) {
        var server = createServer();
        var urls = [];
        pages.forEach(function(page) {
            if (page) {
                urls.push(server.url(page))
            }
        });

        shoot(urls);
    } else {
        shoot(pages);
    }


});

function shoot(urls) {
    var count = parseInt(args.workers, 10) || 1;
    var bundels = divideArray(urls, count);

    countDone = 0;
    bundels.forEach(function(bundle) {
        spawnScreenshooter(bundle, function() {

            countDone++;

            if (bundels.length == countDone) {
                process.exit();
            }
        });
    });
}


function spawnScreenshooter(urls, callback) {
    var cp = spawn(phantom, [
        script,
        urls.join(' ')
    ]);

    cp.stdout.pipe(process.stdout);
    cp.stderr.pipe(process.stderr);

    cp.on('error', function (err) {
        console.error('Error executing phantom at', phantom)
        console.error(err.stack)
    });

    cp.on('close', function() {
        callback();
    });

    process.on('SIGTERM', function() {
        cp.kill('SIGTERM')
        process.exit(1)
    });
}




function divideArray(array, count) {
    var result = [];
    var length = array.length;
    var countPerBundle = Math.ceil(length / count);

    for (var number = 0; number < count; number++) {
        var start = number * countPerBundle;
        var end = start + countPerBundle

        var part = array.slice(start, end);
        if (part.length) {
            result.push(array.slice(start, end));
        } else {
            break;
        }

    }

    return result;
}

function createServer(files) {
    var connect = require('connect');
    var pages = path.resolve(cwd, './html');
    var host = 'localhost';
    var port = 3000;

    var server = connect()
        .use(connect.static(pages))
        .use(connect.logger('default'))
        .listen(port);

    return {
        url: function(str) {
            return 'http://' + host + ':' + port + '/' + path.relative(pages, str);
        }
    }
}


